version: "2"

networks:
    app_network:
        driver: bridge
    
services:
    nifi:
        image: erreesse/nifi
        container_name: nifi
        hostname: nifi
        networks:
            - app_network 
        ports:
            - "5555:5555"
            - "43210:43210" #remote intellij degugging port
        volumes: 
            - ./nifi_conf:/usr/local/nifi/conf/flow
            - ./nifi_extensions:/usr/local/nifi/extensions
            - ./results-uploader:/data/results-uploader
        stdin_open: true
        tty: true

    master:
        build:
            context: ../docker-images/hdfs-yarn-spark
        image: erreesse/my-hds-yarn-spark
        container_name: master
        hostname: master
        networks:
            - app_network
        ports:
            - "9870:9870"
            - "8088:8088"
            - "54310:54310"
            - "43211:43211" #remote intellij degugging port
        volumes: 
            - ./spark_jar:/sabd/jar
        stdin_open: true
        tty: true
        environment: 
            - ISMASTER=1

    slave1:
        image: erreesse/my-hds-yarn-spark
        container_name: slave1
        hostname: slave1
        networks:
            - app_network
        ports:
            - "9864:9864"
        depends_on:
            - master
        stdin_open: true
        tty: true
        environment: 
            - ISMASTER=0

  
    slave2:
        image: erreesse/my-hds-yarn-spark
        container_name: slave2
        hostname: slave2
        networks:
            - app_network
        ports:
            - "9863:9864"
        depends_on:
            - master
        stdin_open: true
        tty: true
        environment: 
            - ISMASTER=0


    slave3:
        image: erreesse/my-hds-yarn-spark
        container_name: slave3
        hostname: slave3
        networks:
            - app_network
        ports:
            - "9862:9864"
        depends_on:
            - master
        stdin_open: true
        tty: true
        environment: 
            - ISMASTER=0

        
    citylocationhelper:
        build:
            context: ../docker-images/citylocationhelper-python
        image: erreesse/citylocationhelper
        container_name: citylocationhelper
        hostname: citylocationhelper
        networks:
            - app_network
        ports:
            - "8888:8888"
        environment:
            - TZ_HOST=0.0.0.0
            - TZ_PORT=8888
        stdin_open: true
        tty: true
        restart: on-failure

    hbase:
        image: erreesse/hbase
        container_name: hbase
        hostname: hbase
        networks:
            - app_network
        ports:
            - "16010:16010"
        depends_on:
            - master
        stdin_open: true
        tty: true
        entrypoint: /entrypoint.sh

    zookeeper:
        image: wurstmeister/zookeeper
        container_name: zookeeper
        hostname: zookeeper
        networks:
            - app_network
        ports:
            - '2181:2181'
        environment:
            - ALLOW_ANONYMOUS_LOGIN=yes
  
    kafka:
        image: wurstmeister/kafka
        container_name: kafka
        hostname: kafka
        networks:
            - app_network
        ports:
            - '9092:9092'
        depends_on:
            - zookeeper
        environment:
            - KAFKA_ADVERTISED_HOST_NAME=kafka
            - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
            - KAFKA_LOG_RETENTION_HOURS=1
            - KAFKA_MESSAGE_MAX_BYTES=2000000000

    jetty:
        image: jetty
        container_name: jetty
        hostname: jetty
        networks:
            - app_network
        ports:
            - '65000:8080'
        volumes:
            - ./jetty_wars:/var/lib/jetty/webapps